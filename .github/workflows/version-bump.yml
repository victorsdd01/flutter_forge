name: Version Bump

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

permissions:
  contents: write
  pull-requests: read
  statuses: write

jobs:
  version-bump:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
      
      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: '3.8.0'
      
      - name: Determine version bump type
        id: bump-type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_LABELS="${{ github.event.pull_request.labels.*.name }}"
          
          if [[ "$PR_TITLE" == *"[MAJOR]"* ]] || [[ "$PR_LABELS" == *"major"* ]]; then
            echo "bump-type=major" >> $GITHUB_OUTPUT
          elif [[ "$PR_TITLE" == *"[MINOR]"* ]] || [[ "$PR_LABELS" == *"minor"* ]]; then
            echo "bump-type=minor" >> $GITHUB_OUTPUT
          else
            echo "bump-type=patch" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version
        run: |
          dart run scripts/version_manager.dart ${{ steps.bump-type.outputs.bump-type }}
      
      - name: Commit version changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "üîñ Bump version to ${{ steps.bump-type.outputs.bump-type }} release"
          git push origin ${{ github.head_ref }}
      
      - name: Create git tag
        id: tag
        run: |
          VERSION=$(dart run scripts/version_manager.dart show | grep "FlutterForge CLI Version:" | sed 's/.*FlutterForge CLI Version: //')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          git tag v$VERSION
          git push origin v$VERSION
      
      - name: Create GitHub Release
        run: |
          gh release create v${{ steps.tag.outputs.version }} \
            --title "FlutterForge CLI v${{ steps.tag.outputs.version }}" \
            --notes "## üöÄ What's New in v${{ steps.tag.outputs.version }}
            
            ### ‚ú® Features
            - Enhanced CLI experience with beautiful progress bars
            - Automatic version management
            - Improved update system
            
            ### üêõ Bug Fixes
            - Various improvements and optimizations
            
            ### üì¶ Installation
            \`\`\`bash
            dart pub global activate --source git https://github.com/victorsdd01/flutter_forge.git
            \`\`\`
            
            ### üîÑ Update
            \`\`\`bash
            flutterforge --update
            \`\`\`"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Report Status
        run: |
          echo "‚úÖ Version bump workflow completed successfully"
          echo "Version: ${{ steps.tag.outputs.version }}"
          echo "Tag: v${{ steps.tag.outputs.version }}"
          echo "Release: FlutterForge CLI v${{ steps.tag.outputs.version }}"
      
      - name: Update PR Status
        run: |
          gh api repos/${{ github.repository }}/statuses/${{ github.sha }} \
            -f state=success \
            -f target_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            -f description="Version bump completed successfully" \
            -f context="version-bump"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 